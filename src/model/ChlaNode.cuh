/**
 * @file
 *
 * @author Generated by spec2x
 * $Rev$
 * $Date$
 */
#ifndef BIM_NPZD_CHLANODE_CUH
#define BIM_NPZD_CHLANODE_CUH

#include "bi/model/BayesNode.hpp"
#include "bi/cuda/cuda.hpp"

/**
 * \f$Chla\f$; 
 *
 * \f$\frac{P \mu^{Ch} \nu^N}{\pi^R(\nu^N + \pi^{NC} \nu^N)}\f$
 */
class ChlaNode : public bi::BayesNode {
public:
  /**
   * Constructor.
   */
  ChlaNode();

  template<class V1, class V2, class V3, class V4, class V5>
  static CUDA_FUNC_BOTH void s(const V1& fpax, const V2& rpax,
      const V3& inpax, const V4& expax, V5& x);
};

#include "bi/model/NodeStaticTraits.hpp"
#include "bi/model/NodeTypeTraits.hpp"

IS_GENERIC_STATIC(ChlaNode)
IS_IN_NODE(ChlaNode)

inline ChlaNode::ChlaNode() {
  setName("Chla");
}

template<class V1, class V2, class V3, class V4, class V5>
inline void ChlaNode::s(const V1& fpax, const V2& rpax,
    const V3& inpax, const V4& expax, V5& x) {
  const real_t tau10 = CUDA_REAL(2);
  const real_t tauR = CUDA_REAL(15);
  const real_t piR = CUDA_REAL(0.18);
  const real_t piC = CUDA_REAL(0.04);
  const real_t piPE = CUDA_REAL(1200);

  const real_t P = expax[0];
  const real_t muCh = inpax[0];
  const real_t N = expax[1];
  const real_t muC = inpax[1];
  const real_t T = fpax[0];
  const real_t muCN = inpax[2];
  const real_t nuA = inpax[3];
  const real_t piNC = inpax[4];
  const real_t E = fpax[1];

  const real_t tauC = pow(tau10, (T - tauR)/10);
  const real_t muCT = muC*tauC;
  const real_t piN = muCT/muCN;
  const real_t nuN = N/(N + piN/nuA);
  const real_t piQ = piC*piPE;
  const real_t piE = 1-exp(-piQ*muCh*E/muC);

  x = P*muCh*nuN/(piR*(nuN+piNC*piE));
}

#endif

