/**
 * @file
 * 
 * @author Generated by spec2x
 * $Rev$
 * $Date$
 */
#ifndef BIM_NPZD_PNODE_CUH
#define BIM_NPZD_PNODE_CUH

#include "bi/model/BayesNode.hpp"
#include "bi/cuda/cuda.hpp"

/**
 * \f$P\f$; 
 *
 * \f$\mu P - \pi^G + \beta^E(\beta^P - P)\f$
 */
class PNode : public bi::BayesNode {
public:
  template<class T, class V1, class V2, class V3, class V4, class V5>
  static CUDA_FUNC_BOTH void dfdt(const T t, const V1& fpax,
      const V2& rpax, const V3& inpax, const V4& expax, V5& dfdt);
};

#include "bi/model/NodeForwardTraits.hpp"
#include "bi/model/NodeTypeTraits.hpp"

IS_EX_NODE(PNode)
IS_ODE_FORWARD(PNode)

template<class T1, class V1, class V2, class V3, class V4, class V5>
inline void PNode::dfdt(const T1 t, const V1& fpax,
    const V2& rpax, const V3& inpax, const V4& expax, V5& dfdt) {
  const real_t tau10 = CUDA_REAL(0);
  const real_t tauR = CUDA_REAL(0);
  const real_t piC = CUDA_REAL(0);
  const real_t piPE = CUDA_REAL(0);
  const real_t piK = CUDA_REAL(0);

  const real_t muC = inpax[0];
  const real_t T = fpax[0];
  const real_t muCh = inpax[1];
  const real_t E = fpax[1];
  const real_t N = expax[0];
  const real_t muCN = inpax[2];
  const real_t nuA = inpax[3];
  const real_t P = expax[1];
  const real_t Z = expax[2];
  const real_t zetaI = inpax[4];
  const real_t zetaCl = inpax[5];
  const real_t betaE = fpax[2];
  const real_t betaP = fpax[3];

  const real_t tauC = pow(tau10, (T - tauR)/10);
  const real_t muCT = muC*tauC;
  const real_t piQ = piC*piPE;
  const real_t piE = 1-exp(-piQ*muCh*E/muC);
  const real_t piN = muCT/muCN;
  const real_t nuN = N/(N + piN/nuA);
  const real_t mu = muCT*piE*nuN/(nuN + muCN*piE);
  const real_t piS = pow(zetaCl*P/zetaI, piK);
  const real_t piG = Z*zetaI*tauC*piS/(1+piS);

  dfdt = mu*P - piG + betaE*(betaP - P);
}

#endif

